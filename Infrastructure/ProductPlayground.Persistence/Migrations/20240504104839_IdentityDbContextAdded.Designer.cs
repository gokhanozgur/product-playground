// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProductPlayground.Persistence.Context;

#nullable disable

namespace ProductPlayground.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240504104839_IdentityDbContextAdded")]
    partial class IdentityDbContextAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProductPlayground.Domain.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 5, 4, 13, 48, 39, 348, DateTimeKind.Local).AddTicks(2711),
                            Name = "Electronics & Grocery"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 5, 4, 13, 48, 39, 348, DateTimeKind.Local).AddTicks(2726),
                            Name = "Grocery, Books & Garden"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 5, 4, 13, 48, 39, 348, DateTimeKind.Local).AddTicks(2739),
                            Name = "Electronics, Automotive & Shoes"
                        });
                });

            modelBuilder.Entity("ProductPlayground.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ParentId")
                        .HasColumnType("integer");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 5, 4, 13, 48, 39, 348, DateTimeKind.Local).AddTicks(3757),
                            Name = "Electronic",
                            ParentId = 0,
                            Priority = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 5, 4, 13, 48, 39, 348, DateTimeKind.Local).AddTicks(3761),
                            Name = "Moda",
                            ParentId = 0,
                            Priority = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 5, 4, 13, 48, 39, 348, DateTimeKind.Local).AddTicks(3762),
                            Name = "Computer",
                            ParentId = 1,
                            Priority = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 5, 4, 13, 48, 39, 348, DateTimeKind.Local).AddTicks(3764),
                            Name = "Dress",
                            ParentId = 2,
                            Priority = 2
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 5, 4, 13, 48, 39, 349, DateTimeKind.Local).AddTicks(7160),
                            Name = "Health",
                            ParentId = 3,
                            Priority = 8
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2024, 5, 4, 13, 48, 39, 349, DateTimeKind.Local).AddTicks(7215),
                            Name = "Baby, Movies & Grocery",
                            ParentId = 1,
                            Priority = 3
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2024, 5, 4, 13, 48, 39, 349, DateTimeKind.Local).AddTicks(7232),
                            Name = "Clothing, Shoes & Tools",
                            ParentId = 3,
                            Priority = 10
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2024, 5, 4, 13, 48, 39, 349, DateTimeKind.Local).AddTicks(7245),
                            Name = "Books & Music",
                            ParentId = 3,
                            Priority = 3
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2024, 5, 4, 13, 48, 39, 349, DateTimeKind.Local).AddTicks(7260),
                            Name = "Computers, Home & Baby",
                            ParentId = 1,
                            Priority = 7
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2024, 5, 4, 13, 48, 39, 349, DateTimeKind.Local).AddTicks(7276),
                            Name = "Computers, Toys & Baby",
                            ParentId = 3,
                            Priority = 7
                        });
                });

            modelBuilder.Entity("ProductPlayground.Domain.Entities.Detail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Details");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2024, 5, 4, 13, 48, 39, 351, DateTimeKind.Local).AddTicks(2025),
                            Description = "Eos.",
                            Title = "Quos."
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 4,
                            CreatedDate = new DateTime(2024, 5, 4, 13, 48, 39, 351, DateTimeKind.Local).AddTicks(2044),
                            Description = "Et.",
                            Title = "Assumenda."
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2024, 5, 4, 13, 48, 39, 351, DateTimeKind.Local).AddTicks(2087),
                            Description = "Sint.",
                            Title = "Ipsa."
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            CreatedDate = new DateTime(2024, 5, 4, 13, 48, 39, 351, DateTimeKind.Local).AddTicks(2104),
                            Description = "Autem.",
                            Title = "Occaecati."
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2024, 5, 4, 13, 48, 39, 351, DateTimeKind.Local).AddTicks(2119),
                            Description = "Ea.",
                            Title = "Laudantium."
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2024, 5, 4, 13, 48, 39, 351, DateTimeKind.Local).AddTicks(2134),
                            Description = "Cupiditate.",
                            Title = "Consectetur."
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2024, 5, 4, 13, 48, 39, 351, DateTimeKind.Local).AddTicks(2151),
                            Description = "Ut.",
                            Title = "Aut."
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2024, 5, 4, 13, 48, 39, 351, DateTimeKind.Local).AddTicks(2166),
                            Description = "Molestiae.",
                            Title = "Nihil."
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2024, 5, 4, 13, 48, 39, 351, DateTimeKind.Local).AddTicks(2181),
                            Description = "Magnam.",
                            Title = "Dolore."
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 4,
                            CreatedDate = new DateTime(2024, 5, 4, 13, 48, 39, 351, DateTimeKind.Local).AddTicks(2195),
                            Description = "Amet.",
                            Title = "Doloremque."
                        });
                });

            modelBuilder.Entity("ProductPlayground.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Discount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 2,
                            CreatedDate = new DateTime(2024, 5, 4, 13, 48, 39, 353, DateTimeKind.Local).AddTicks(1254),
                            Description = "Ut.",
                            Discount = 19.73m,
                            Price = 1286.50m,
                            Title = "Reiciendis."
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 3,
                            CreatedDate = new DateTime(2024, 5, 4, 13, 48, 39, 353, DateTimeKind.Local).AddTicks(1274),
                            Description = "Porro.",
                            Discount = 43.91m,
                            Price = 1125.17m,
                            Title = "Et."
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 1,
                            CreatedDate = new DateTime(2024, 5, 4, 13, 48, 39, 353, DateTimeKind.Local).AddTicks(1290),
                            Description = "Eaque.",
                            Discount = 39.07m,
                            Price = 1292.76m,
                            Title = "Autem."
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 3,
                            CreatedDate = new DateTime(2024, 5, 4, 13, 48, 39, 353, DateTimeKind.Local).AddTicks(1321),
                            Description = "Consequuntur.",
                            Discount = 37.10m,
                            Price = 1007.30m,
                            Title = "Rerum."
                        },
                        new
                        {
                            Id = 5,
                            BrandId = 3,
                            CreatedDate = new DateTime(2024, 5, 4, 13, 48, 39, 353, DateTimeKind.Local).AddTicks(1340),
                            Description = "Quam.",
                            Discount = 29.40m,
                            Price = 835.88m,
                            Title = "Voluptatem."
                        },
                        new
                        {
                            Id = 6,
                            BrandId = 2,
                            CreatedDate = new DateTime(2024, 5, 4, 13, 48, 39, 353, DateTimeKind.Local).AddTicks(1358),
                            Description = "Suscipit.",
                            Discount = 20.95m,
                            Price = 1196.09m,
                            Title = "Quas."
                        },
                        new
                        {
                            Id = 7,
                            BrandId = 2,
                            CreatedDate = new DateTime(2024, 5, 4, 13, 48, 39, 353, DateTimeKind.Local).AddTicks(1374),
                            Description = "Vel.",
                            Discount = 27.26m,
                            Price = 816.62m,
                            Title = "Placeat."
                        },
                        new
                        {
                            Id = 8,
                            BrandId = 1,
                            CreatedDate = new DateTime(2024, 5, 4, 13, 48, 39, 353, DateTimeKind.Local).AddTicks(1391),
                            Description = "Et.",
                            Discount = 37.04m,
                            Price = 1371.76m,
                            Title = "Exercitationem."
                        },
                        new
                        {
                            Id = 9,
                            BrandId = 3,
                            CreatedDate = new DateTime(2024, 5, 4, 13, 48, 39, 353, DateTimeKind.Local).AddTicks(1408),
                            Description = "Ut.",
                            Discount = 46.23m,
                            Price = 727.59m,
                            Title = "Quo."
                        },
                        new
                        {
                            Id = 10,
                            BrandId = 1,
                            CreatedDate = new DateTime(2024, 5, 4, 13, 48, 39, 353, DateTimeKind.Local).AddTicks(1425),
                            Description = "Porro.",
                            Discount = 13.95m,
                            Price = 615.77m,
                            Title = "Occaecati."
                        });
                });

            modelBuilder.Entity("ProductPlayground.Domain.Entities.ProductCategory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("ProductPlayground.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("ProductPlayground.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ProductPlayground.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ProductPlayground.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ProductPlayground.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("ProductPlayground.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductPlayground.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ProductPlayground.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductPlayground.Domain.Entities.Detail", b =>
                {
                    b.HasOne("ProductPlayground.Domain.Entities.Category", "Category")
                        .WithMany("Details")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ProductPlayground.Domain.Entities.Product", b =>
                {
                    b.HasOne("ProductPlayground.Domain.Entities.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("ProductPlayground.Domain.Entities.ProductCategory", b =>
                {
                    b.HasOne("ProductPlayground.Domain.Entities.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductPlayground.Domain.Entities.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ProductPlayground.Domain.Entities.Category", b =>
                {
                    b.Navigation("Details");

                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("ProductPlayground.Domain.Entities.Product", b =>
                {
                    b.Navigation("ProductCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
